{"version":3,"sources":["../src/ZooqleClient.js"],"names":["BASE_URL","CACHE_PREFIX","MAX_CONCURRENT_REQUESTS","CACHE_TTLS","getItemUrl","getMovieTorrents","getShowTorrents","NO_RESULTS","ZooqleClient","constructor","userName","password","userAgent","cache","proxy","Error","_userName","_password","_userAgent","_scheduler","Bottleneck","maxConcurrent","_cache","cacheManager","caching","store","redisStore","url","_proxy","_extractTorrentsFromPage","body","$","cheerio","load","currentCategory","toArray","reduce","results","row","i","$cells","find","length","newCategory","eq","prev","text","trim","magnetLink","attr","$audioSpans","audio","undefined","languages","toUpperCase","split","$category","parent","category","users","last","seedersMatch","match","seeders","Number","replace","push","_getShowIdFromPage","_getAuthStatusFromResponse","res","Boolean","includes","_request","method","headers","data","schedule","options","cookies","_cookies","statusCode","_authenticate","action","remember","user","zqt","_getItemUrl","imdbId","searchUrl","location","_getMovieTorrents","_getShowTorrents","season","episode","itemUrl","itemRes","showId","torrentsUrl","torrentsRes","cacheKey","cacheOptions","ttl","bind","wrap"],"mappings":"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","sourcesContent":["import needle from 'needle'\nimport cheerio from 'cheerio'\nimport cacheManager from 'cache-manager'\nimport redisStore from 'cache-manager-redis-store'\nimport Bottleneck from 'bottleneck'\n\n\nconst BASE_URL = 'https://zooqle.com'\nconst CACHE_PREFIX = 'stremio_zooqle|'\nconst MAX_CONCURRENT_REQUESTS = 6\nconst CACHE_TTLS = {\n  // Item URLs aren't supposed to change, so we cache them for long\n  getItemUrl: 7 * 24 * 60 * 60, // a week\n  getMovieTorrents: 4 * 60 * 60, // 4 hours\n  getShowTorrents: 4 * 60 * 60, // 4 hours\n  NO_RESULTS: 10 * 60, // 10 minutes\n}\n\n\nclass ZooqleClient {\n  constructor({ userName, password, userAgent, cache, proxy } = {}) {\n    if (!userName || !password) {\n      throw new Error('Username and password are required')\n    }\n\n    this._userName = userName\n    this._password = password\n    this._userAgent = userAgent\n    this._scheduler = new Bottleneck({ maxConcurrent: MAX_CONCURRENT_REQUESTS })\n\n    if (cache === '1') {\n      this._cache = cacheManager.caching({ store: 'memory' })\n    } else if (cache && cache !== '0') {\n      this._cache = cacheManager.caching({\n        store: redisStore,\n        url: cache,\n      })\n    }\n\n    if (proxy) {\n      this._proxy = proxy\n    }\n  }\n\n  _extractTorrentsFromPage(body) {\n    let $ = cheerio.load(body)\n    let currentCategory = 'Std'\n\n    return $('.table-torrents tr').toArray().reduce((results, row, i) => {\n      let $cells = $(row).find('td')\n\n      if (i === 0 || $cells.length === 1) {\n        // Sometimes a category is specified as a header on a separate row...\n        let newCategory = $cells.eq(0).find('a ~ span').prev().text().trim()\n        currentCategory = newCategory || currentCategory\n      } else {\n        let magnetLink = $cells.find('a[href^=\"magnet\"]').attr('href')\n\n        let $audioSpans = $cells.eq(1).find('div > span:not(.smallest)')\n        let audio = $audioSpans.eq(0).text() || undefined\n        let languages = $audioSpans.eq(1).text().toUpperCase()\n        languages = languages ? languages.split(',') : []\n\n        // ...and sometimes as a small icon along the audio specs\n        let $category = $cells.eq(1).find('.zqf-mi-width, .zqf-mi-3d').parent()\n        let category = $category.text().trim() || currentCategory\n\n        let users = $cells.find('.progress').last().attr('title')\n        let seedersMatch = users && users.match(/seeders:\\s*([0-9,]+)/i)\n        let seeders = seedersMatch && Number(seedersMatch[1].replace(',', ''))\n\n        results.push({ category, magnetLink, seeders, audio, languages })\n      }\n\n      return results\n    }, [])\n  }\n\n  _getShowIdFromPage(body) {\n    let match = body.match(/data-href=\"[^\"]+show=(\\d+)/)\n    return match && match[1]\n  }\n\n  _getAuthStatusFromResponse(res) {\n    return Boolean(res.body) && res.body.includes('href=\"/user/tv\"')\n  }\n\n  async _request(url, method = 'get', headers = {}, data = null) {\n    return this._scheduler.schedule(async () => {\n      let options = {\n        headers: {\n          'user-agent': this._userAgent,\n          ...headers,\n        },\n        cookies: this._cookies,\n        proxy: this._proxy,\n      }\n      let res = await needle(method, url, data, options)\n\n      if (res.statusCode > 399) {\n        throw new Error(`Error ${res.statusCode} when requesting ${url}`)\n      }\n\n      if (res.cookies) {\n        this._cookies = { ...this.cookies, ...res.cookies }\n      }\n\n      return res\n    })\n  }\n\n  async _authenticate() {\n    let url = `${BASE_URL}/user/register?ajax=1`\n    let data = {\n      action: 'login',\n      remember: 1,\n      user: this._userName,\n      password: this._password,\n    }\n    let headers = {\n      'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',\n      'x-requested-with': 'XMLHttpRequest',\n    }\n\n    let res = await this._request(url, 'post', headers, data)\n\n    if (!res.cookies || !res.cookies.zqt) {\n      throw new Error('Unable to authenticate')\n    }\n  }\n\n  async _getItemUrl(imdbId) {\n    let searchUrl = `${BASE_URL}/search?q=${imdbId}`\n    let res = await this._request(searchUrl)\n\n    if (res.statusCode < 300) {\n      return\n    }\n\n    return `${BASE_URL}${res.headers.location}`\n  }\n\n  async _getMovieTorrents(imdbId) {\n    if (!this._cookies) {\n      await this._authenticate()\n    }\n\n    let url = await this.getItemUrl(imdbId)\n\n    if (!url) {\n      return []\n    }\n\n    let res = await this._request(url)\n\n    // In case the session has been terminated for whatever reason\n    // (like cookie expiration)\n    if (!this._getAuthStatusFromResponse(res)) {\n      await this._authenticate()\n      res = await this._request(url)\n    }\n\n    return this._extractTorrentsFromPage(res.body) || []\n  }\n\n  async _getShowTorrents(imdbId, season, episode) {\n    let itemUrl = await this.getItemUrl(imdbId)\n\n    if (!itemUrl) {\n      return []\n    }\n\n    let itemRes = await this._request(itemUrl)\n    let showId = this._getShowIdFromPage(itemRes.body)\n\n    if (!showId) {\n      return []\n    }\n\n    let torrentsUrl = `${BASE_URL}/misc/tveps.php` +\n      `?show=${showId}&se=${season}&ep=${episode}`\n    let torrentsRes = await this._request(torrentsUrl)\n\n    return this._extractTorrentsFromPage(torrentsRes.body) || []\n  }\n\n  async getItemUrl(imdbId) {\n    if (!this._cache) {\n      return this._getItemUrl(imdbId)\n    }\n\n    let cacheKey = `${CACHE_PREFIX}itemUrl:${imdbId}`\n    let cacheOptions = {\n      ttl: CACHE_TTLS.getItemUrl,\n    }\n    let method = this._getItemUrl.bind(this, imdbId)\n    return this._cache.wrap(cacheKey, method, cacheOptions)\n  }\n\n  async getMovieTorrents(imdbId) {\n    if (!this._cache) {\n      return this._getMovieTorrents(imdbId)\n    }\n\n    let cacheKey = `${CACHE_PREFIX}movie:${imdbId}`\n    let cacheOptions = {\n      ttl: (res) => {\n        return res.length ? CACHE_TTLS.getMovieTorrents : CACHE_TTLS.NO_RESULTS\n      },\n    }\n    let method = this._getMovieTorrents.bind(this, imdbId)\n    return this._cache.wrap(cacheKey, method, cacheOptions)\n  }\n\n  async getShowTorrents(imdbId, season, episode) {\n    if (!this._cache) {\n      return this._getShowTorrents(imdbId, season, episode)\n    }\n\n    let cacheKey = `${CACHE_PREFIX}show:${imdbId}:${season}:${episode}`\n    let cacheOptions = {\n      ttl: (res) => {\n        return res.length ? CACHE_TTLS.getShowTorrents : CACHE_TTLS.NO_RESULTS\n      },\n    }\n    let method = this._getShowTorrents.bind(this, imdbId, season, episode)\n    return this._cache.wrap(cacheKey, method, cacheOptions)\n  }\n}\n\n\nexport default ZooqleClient\n"],"file":"ZooqleClient.js"}